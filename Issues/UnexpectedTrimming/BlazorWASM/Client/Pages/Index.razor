@page "/"
@using System.Reflection

<h1>Unexpected Trimming</h1>

After publishing, I expect all of the following to be true:

<div>
	<div>Net 6 Method exists: @_isNet6MethodPresent</div>
	<div>Net 6 Type exists: @_isNet6TypePresent</div>
	<div>Net Standard Method exists: @_isNetStandardMethodPresent</div>
	<div>Net Standard Type exists: @_isNetStandardTypePresent</div>
</div>

@code {

	private bool _isNet6MethodPresent;
	private bool _isNet6TypePresent;
	private bool _isNetStandardMethodPresent;
	private bool _isNetStandardTypePresent;

	protected override void OnInitialized()
	{

		base.OnInitialized();

		LinkerFriendlyNetStandardLibrary.TrimmingTargetAttributed.DoSomething();
		LinkerFriendlyNet6Library.TrimmingTargetAttributed.DoSomething();

		_isNetStandardMethodPresent = TrimmingChecker.PresenceTester.IsMethodPresent(
			"LinkerFriendlyNetStandardLibrary.TrimmingTargetAttributed, LinkerFriendlyNetStandardLibrary",
			"ThisMightBeRemovedByTheLinker",
			BindingFlags.Instance | BindingFlags.NonPublic);

		_isNetStandardTypePresent = TrimmingChecker.PresenceTester.IsTypePresent(
			"LinkerFriendlyNetStandardLibrary.RandomIntGenerator, LinkerFriendlyNetStandardLibrary");

		_isNet6MethodPresent = TrimmingChecker.PresenceTester.IsMethodPresent(
			"LinkerFriendlyNet6Library.TrimmingTargetAttributed, LinkerFriendlyNet6Library",
			"ThisMightBeRemovedByTheLinker",
			BindingFlags.Instance | BindingFlags.NonPublic);

		_isNet6TypePresent = TrimmingChecker.PresenceTester.IsTypePresent(
			"LinkerFriendlyNet6Library.RandomIntGenerator, LinkerFriendlyNet6Library");

	}

}