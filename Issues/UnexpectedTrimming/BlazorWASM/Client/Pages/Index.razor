@page "/"
@using System.Reflection

<h1>Unexpected Trimming</h1>

I expect all of the following to be true:

<div>
	<div>Net 6 Method exists: @_isNet6MethodPresent</div>
	<div>Net 6 Type exists: @_isNet6TypePresent</div>
	<div>Net Standard Method exists: @_isNetStandardMethodPresent</div>
	<div>Net Standard Type exists: @_isNetStandardTypePresent</div>
</div>

@code {

	private bool _isNet6MethodPresent;
	private bool _isNet6TypePresent;
	private bool _isNetStandardMethodPresent;
	private bool _isNetStandardTypePresent;

	protected override void OnInitialized()
	{

		base.OnInitialized();

		LinkerFriendlyNet6Library.TestClass.DoSomething();

		_isNetStandardMethodPresent = LinkerFriendlyNetStandardLibrary.ReflectionChecker.IsMethodPresent(
			"LinkerFriendlyNetStandardLibrary.TestClass, LinkerFriendlyNetStandardLibrary", 
			"ThisMightBeRemovedByTheLinker", 
			BindingFlags.Instance | BindingFlags.NonPublic);

		_isNetStandardTypePresent = LinkerFriendlyNetStandardLibrary.ReflectionChecker.IsTypePresent(
			"LinkerFriendlyNetStandardLibrary.RandomIntGenerator, LinkerFriendlyNetStandardLibrary");

		_isNet6MethodPresent = LinkerFriendlyNet6Library.ReflectionChecker.IsMethodPresent(
			"LinkerFriendlyNet6Library.TestClass, LinkerFriendlyNet6Library", 
			"ThisMightBeRemovedByTheLinker", 
			BindingFlags.Instance | BindingFlags.NonPublic);

		_isNet6TypePresent = LinkerFriendlyNet6Library.ReflectionChecker.IsTypePresent(
			"LinkerFriendlyNet6Library.RandomIntGenerator, LinkerFriendlyNet6Library");

	}

}